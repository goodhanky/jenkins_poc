pipeline {
    agent any

    environment {
        registryCredential = 'ecr:us-west-1:aws_jenkins'
        appRegistry = "159316108899.dkr.ecr.us-west-1.amazonaws.com/vprofileapp"
        vprofileRegistry = "https://159316108899.dkr.ecr.us-west-1.amazonaws.com"
        GITHUB_URL = "https://github.com/devopshydclub/vprofile-project.git"
        scannerHome = tool 'sonar4.7'
    }

    stages {

        stage('Fetch code') {
            steps {
                git branch: 'docker', url: GITHUB_URL
            }
        }

        stage('Test') {
            steps {
                sh 'mvn test'
            }
        }

        stage ('Checkstyle Analysis') {
            steps {
                sh 'mvn checkstyle:checkstyle'
            }
            post {
                success {
                    echo 'Generated Analysis Result'
                }
            }
        }

        stage('Sonar Analysis') {
            steps {
                withSonarQubeEnv('sonar') {
                    sh '''${scannerHome}/bin/sonar-scanner \
                    -Dsonar.projectKey=vprofile \
                    -Dsonar.projectName=vprofile-repo \
                    -Dsonar.projectVersion=1.0 \
                    -Dsonar.sources=src/ \
                    -Dsonar.java.binaries=target/test-classes/com/visualpathit/account/controllerTest/ \
                    -Dsonar.junit.reportsPath=target/surefire-reports/ \
                    -Dsonar.jacoco.reportsPath=target/jacoco.exec \
                    -Dsonar.java.checkstyle.reportPaths=target/checkstyle-result.xml'''
                }
            }
        }

        stage('Build App Image') {
            steps {
                script {
                    dockerImage = docker.build( appRegistry + ":$BUILD_NUMBER", "./Docker-files/app/multistage/")
                }
            }
        }

        stage('Upload App Image') {
            steps {
                script {
                    docker.withRegistry( vprofileRegistry, registryCredential ) {
                    dockerImage.push("$BUILD_NUMBER")
                    dockerImage.push('latest')
                    }
                }
            }
        }

    }
}